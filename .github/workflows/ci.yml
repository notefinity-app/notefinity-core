name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security audit weekly on Mondays at 9:00 AM UTC
    - cron: '0 9 * * 1'

jobs:
  test:
    name: Test & Coverage
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x, 22.x]

    services:
      couchdb:
        image: couchdb:3.3
        ports:
          - 5984:5984
        env:
          COUCHDB_USER: admin
          COUCHDB_PASSWORD: password
        options: >-
          --health-cmd "curl -f http://localhost:5984/_up"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Workaround for npm optional dependencies bug with Rollup
          # https://github.com/npm/cli/issues/4828
          if ! npm ci; then
            echo "npm ci failed, trying workaround for optional dependencies..."
            rm -rf node_modules package-lock.json
            npm install
          fi

      - name: Verify Rollup installation
        run: |
          echo "Verifying Rollup and Vitest can start..."
          npx vitest --version || echo "Vitest version check failed"
          node -e "require('rollup')" || echo "Rollup require test failed"

      - name: Check code formatting
        run: |
          echo "Checking code formatting with Prettier..."
          if ! npm run format:check; then
            echo "‚ùå Code formatting check failed!"
            echo "üí° To fix locally, run: npm run format"
            echo "üìã Files that need formatting:"
            npm run format:check 2>&1 | grep -E '\.(ts|js|json|md|yml|yaml)$' || true
            exit 1
          fi
          echo "‚úÖ All files are properly formatted!"

      - name: Fix Rollup dependencies before build
        run: |
          echo "Checking and fixing Rollup dependencies for Vite..."
          # Check if Rollup can be loaded (but don't fail on this check)
          if ! node -e "require('rollup')" 2>/dev/null; then
            echo "‚ö†Ô∏è  Rollup verification failed - applying dependency fix..."
            rm -rf node_modules package-lock.json
            npm install
            
            # Try alternative approach if still failing
            if ! node -e "require('rollup')" 2>/dev/null; then
              echo "‚ö†Ô∏è  Rollup still not directly accessible - using force install..."
              npm install --force
            fi
          fi

          # Final check (informational only, don't fail CI)
          if node -e "require('rollup')" 2>/dev/null; then
            echo "‚úÖ Rollup is directly accessible"
          else
            echo "‚ö†Ô∏è  Rollup not directly accessible, but continuing (Vite may still work)"
          fi
        continue-on-error: true

      - name: Build project
        run: |
          echo "Building project with Vite..."
          # Try to build first, with fallback if Rollup issues occur
          if ! npm run build; then
            echo "‚ùå Build failed, likely due to Rollup dependency issues"
            echo "Applying additional Rollup dependency fix and retrying..."
            rm -rf node_modules package-lock.json
            npm install
            echo "Retrying build after dependency refresh..."
            npm run build
          else
            echo "‚úÖ Build succeeded"
          fi

      - name: Install curl
        run: sudo apt-get update && sudo apt-get install -y curl

      - name: Wait for CouchDB
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:5984/_up; then
              echo "CouchDB is ready"
              break
            fi
            echo "Waiting for CouchDB... ($i/30)"
            sleep 2
          done

      - name: Setup CouchDB for tests
        run: |
          curl -X PUT http://admin:password@localhost:5984/_users || echo "Users DB might already exist"
          curl -X PUT http://admin:password@localhost:5984/_replicator || echo "Replicator DB might already exist" 
          curl -X PUT http://admin:password@localhost:5984/_global_changes || echo "Global changes DB might already exist"
        env:
          COUCHDB_URL: http://admin:password@localhost:5984

      - name: Fix Rollup binaries before tests
        run: |
          echo "Ensuring Rollup binaries are properly installed..."
          # Check if Rollup can be loaded
          if ! node -e "require('rollup')" 2>/dev/null; then
            echo "Rollup failed to load, applying fix..."
            rm -rf node_modules package-lock.json
            npm install
            
            # Verify the fix worked
            if ! node -e "require('rollup')" 2>/dev/null; then
              echo "Rollup still failing, trying alternative approach..."
              npm install --force
            fi
          fi

          # Final verification
          if node -e "require('rollup')" 2>/dev/null; then
            echo "‚úÖ Rollup is working correctly"
          else
            echo "‚ùå Rollup still not working, but continuing..."
          fi

      - name: Run tests
        run: |
          # Try to run tests, with fallback if Rollup issues persist
          if ! npm test; then
            echo "Tests failed, trying npm install fix and retry..."
            rm -rf node_modules package-lock.json
            npm install
            npm test
          fi
        env:
          COUCHDB_URL: http://admin:password@localhost:5984
          JWT_SECRET: test-secret-key-for-ci
          NODE_ENV: test

      - name: Generate coverage report
        run: npm run test:coverage
        env:
          COUCHDB_URL: http://admin:password@localhost:5984
          JWT_SECRET: test-secret-key-for-ci
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: env.CODECOV_TOKEN != ''
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Workaround for npm optional dependencies bug with Rollup
          if ! npm ci; then
            echo "npm ci failed, trying workaround for optional dependencies..."
            rm -rf node_modules package-lock.json
            npm install
          fi

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run npm audit fix (dry run)
        run: npm audit fix --dry-run
        continue-on-error: true

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Workaround for npm optional dependencies bug with Rollup
          if ! npm ci; then
            echo "npm ci failed, trying workaround for optional dependencies..."
            rm -rf node_modules package-lock.json
            npm install
          fi

      - name: Fix Rollup dependencies before build
        run: |
          echo "Checking and fixing Rollup dependencies for Vite..."
          # Check if Rollup can be loaded (but don't fail on this check)
          if ! node -e "require('rollup')" 2>/dev/null; then
            echo "‚ö†Ô∏è  Rollup verification failed - applying dependency fix..."
            rm -rf node_modules package-lock.json
            npm install
            
            # Try alternative approach if still failing
            if ! node -e "require('rollup')" 2>/dev/null; then
              echo "‚ö†Ô∏è  Rollup still not directly accessible - using force install..."
              npm install --force
            fi
          fi

          # Final check (informational only, don't fail CI)
          if node -e "require('rollup')" 2>/dev/null; then
            echo "‚úÖ Rollup is directly accessible"
          else
            echo "‚ö†Ô∏è  Rollup not directly accessible, but continuing (Vite may still work)"
          fi
        continue-on-error: true

      - name: Build project
        run: |
          echo "Building project with Vite..."
          # Try to build first, with fallback if Rollup issues occur
          if ! npm run build; then
            echo "‚ùå Build failed, likely due to Rollup dependency issues"
            echo "Applying additional Rollup dependency fix and retrying..."
            rm -rf node_modules package-lock.json
            npm install
            echo "Retrying build after dependency refresh..."
            npm run build
          else
            echo "‚úÖ Build succeeded"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: |
            dist/
            package.json
            package-lock.json
          retention-days: 30

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: "github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'chore: bump version')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Workaround for npm optional dependencies bug with Rollup
          if ! npm ci; then
            echo "npm ci failed, trying workaround for optional dependencies..."
            rm -rf node_modules package-lock.json
            npm install
          fi

      - name: Fix Rollup dependencies before build
        run: |
          echo "Checking and fixing Rollup dependencies for Vite..."
          # Check if Rollup can be loaded (but don't fail on this check)
          if ! node -e "require('rollup')" 2>/dev/null; then
            echo "‚ö†Ô∏è  Rollup verification failed - applying dependency fix..."
            rm -rf node_modules package-lock.json
            npm install
            
            # Try alternative approach if still failing
            if ! node -e "require('rollup')" 2>/dev/null; then
              echo "‚ö†Ô∏è  Rollup still not directly accessible - using force install..."
              npm install --force
            fi
          fi

          # Final check (informational only, don't fail CI)
          if node -e "require('rollup')" 2>/dev/null; then
            echo "‚úÖ Rollup is directly accessible"
          else
            echo "‚ö†Ô∏è  Rollup not directly accessible, but continuing (Vite may still work)"
          fi
        continue-on-error: true

      - name: Build project
        run: |
          echo "Building project with Vite..."
          # Try to build first, with fallback if Rollup issues occur
          if ! npm run build; then
            echo "‚ùå Build failed, likely due to Rollup dependency issues"
            echo "Applying additional Rollup dependency fix and retrying..."
            rm -rf node_modules package-lock.json
            npm install
            echo "Retrying build after dependency refresh..."
            npm run build
          else
            echo "‚úÖ Build succeeded"
          fi

      - name: Extract version from package.json
        id: package-version
        run: echo "VERSION=$(node -p 'require("./package.json").version')" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package-version.outputs.VERSION }}
          name: Release v${{ steps.package-version.outputs.VERSION }}
          body: |
            ## Changes

            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.

            ## Installation

            ```bash
            npm install @notefinity/core@${{ steps.package-version.outputs.VERSION }}
            ```

            ## Verification

            - ‚úÖ All tests passing
            - ‚úÖ Security audit passed  
            - ‚úÖ Code coverage: 76.08%+
            - ‚úÖ Build successful
          draft: false
          prerelease: false
